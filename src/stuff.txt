TODO: fixes

TODO:
    2. StartMenu
        Play button
        Options button
            fullscreen
        Sound effects and music volume slider
            plus clicking icon mutes
        Credits button


    ideas:
        wiggling tail

        changing color mechanic

        Save system for progression and settings

        Survive timer / wave mode

        make it beautiful elegant and quality of life

        add an action queue so the game registers all keystrokes and
        executes them when possible, make this mode optional




//checks for collision with walls
        if (snake.y[0] < 0) {
            running = false;
        }
        if (snake.y[0] > SCREEN_HEIGHT) {
            running = false;
        }
        if (snake.x[0] < 0) {
            running = false;
        }
        if (snake.x[0] > SCREEN_WIDTH) {
            running = false;
        }


//checks for collision with walls
        if (snake.y[0] < 0 || snake.y[0] > SCREEN_HEIGHT || snake.x[0] < 0 || snake.x[0] > SCREEN_WIDTH) {
            running = false;
        }

private static void wait(int ms) {
            try
            {
                Thread.sleep(ms);
            }
            catch(InterruptedException ex)
            {
                Thread.currentThread().interrupt();
            }
}

this.addComponentListener(new ComponentAdapter() {
    @Override
    public void componentResized(ComponentEvent e) {
    //super.componentResized(e);
    double newShortestSide = Math.max(getContentPane().getWidth(), getContentPane().getHeight());
    setBestSize(newShortestSide, curLongestSide, e);
    }
});
//(shortest side of new) / (longest side of old)
    //= multiplier for both of the component's dimensions.
    private void setBestSize(double newShortestSide, double curLongestSide, ComponentEvent e) {
        double multiplier = newShortestSide / curLongestSide;
        width = closestDivisible((int) (width * multiplier), 10);
        height = closestDivisible((int) (height * multiplier), 10);
        this.curLongestSide = Math.min(width, height);
        this.setPreferredSize(new Dimension(width, height));
        this.pack();
        gamePanel.resize = true;
    }
    private int closestDivisible(int a, int b) {
        return a - (a % b);
    }

// borderless
this.dispose();
this.setUndecorated(true);
this.pack();
this.setVisible(true);

for (int i = 0; i < snake.bodyParts; i++) {
    excludeX[i] = snake.x[i];
    excludeY[i] = snake.y[i];
}

int maxX = (screenWidth / unitSize) - 1;
        int maxY = (screenHeight / unitSize) - 1;

        int[] excludeX = divAllBy(Arrays.stream(snake.x).distinct().sorted().toArray(), unitSize);
        int[] excludeY = divAllBy(Arrays.stream(snake.x).distinct().sorted().toArray(), unitSize);

        food.x = getRandomWithExclusion(random, 0, maxX, excludeX) * unitSize;
        food.y = getRandomWithExclusion(random, 0, maxY, excludeY) * unitSize;

        private int[] divAllBy(int[] arr, int x) {
                int[] result = new int[arr.length];
                for(int a = 0; a < arr.length; a++)
                {
                    result[a] = arr[a]/x;
                }
                return result;
            }

            private int getRandomWithExclusion(Random rnd, int start, int end, int... exclude) {
                int random = start + rnd.nextInt(end - start + 1 - exclude.length);
                for (int ex : exclude) {
                    if (random < ex) {
                        break;
                    }
                    random++;
                }
                return random;
            }